{"remainingRequest":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/ts-loader/index.js??ref--9-3!/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/angular-router-loader/src/index.js!/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/tslint-loader/index.js!/Users/waynedsouza/Documents/Senju/app-gateway/src/main/webapp/app/core/auth/account.service.ts","dependencies":[{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/src/main/webapp/app/core/auth/account.service.ts","mtime":1549704083523},{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar http_1 = require(\"@angular/common/http\");\nvar rxjs_1 = require(\"rxjs\");\nvar app_constants_1 = require(\"app/app.constants\");\nvar AccountService = /** @class */ (function () {\n    function AccountService(http) {\n        this.http = http;\n        this.authenticated = false;\n        this.authenticationState = new rxjs_1.Subject();\n    }\n    AccountService.prototype.fetch = function () {\n        return this.http.get(app_constants_1.SERVER_API_URL + 'api/account', { observe: 'response' });\n    };\n    AccountService.prototype.save = function (account) {\n        return this.http.post(app_constants_1.SERVER_API_URL + 'api/account', account, { observe: 'response' });\n    };\n    AccountService.prototype.authenticate = function (identity) {\n        this.userIdentity = identity;\n        this.authenticated = identity !== null;\n        this.authenticationState.next(this.userIdentity);\n    };\n    AccountService.prototype.hasAnyAuthority = function (authorities) {\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\n            return false;\n        }\n        for (var i = 0; i < authorities.length; i++) {\n            if (this.userIdentity.authorities.includes(authorities[i])) {\n                return true;\n            }\n        }\n        return false;\n    };\n    AccountService.prototype.hasAuthority = function (authority) {\n        if (!this.authenticated) {\n            return Promise.resolve(false);\n        }\n        return this.identity().then(function (id) {\n            return Promise.resolve(id.authorities && id.authorities.includes(authority));\n        }, function () {\n            return Promise.resolve(false);\n        });\n    };\n    AccountService.prototype.identity = function (force) {\n        var _this = this;\n        if (force) {\n            this.userIdentity = undefined;\n        }\n        // check and see if we have retrieved the userIdentity data from the server.\n        // if we have, reuse it by immediately resolving\n        if (this.userIdentity) {\n            return Promise.resolve(this.userIdentity);\n        }\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\n        return this.fetch()\n            .toPromise()\n            .then(function (response) {\n            var account = response.body;\n            if (account) {\n                _this.userIdentity = account;\n                _this.authenticated = true;\n            }\n            else {\n                _this.userIdentity = null;\n                _this.authenticated = false;\n            }\n            _this.authenticationState.next(_this.userIdentity);\n            return _this.userIdentity;\n        })\n            .catch(function (err) {\n            _this.userIdentity = null;\n            _this.authenticated = false;\n            _this.authenticationState.next(_this.userIdentity);\n            return null;\n        });\n    };\n    AccountService.prototype.isAuthenticated = function () {\n        return this.authenticated;\n    };\n    AccountService.prototype.isIdentityResolved = function () {\n        return this.userIdentity !== undefined;\n    };\n    AccountService.prototype.getAuthenticationState = function () {\n        return this.authenticationState.asObservable();\n    };\n    AccountService.prototype.getImageUrl = function () {\n        return this.isIdentityResolved() ? this.userIdentity.imageUrl : null;\n    };\n    var _a;\n    AccountService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\n    ], AccountService);\n    return AccountService;\n}());\nexports.AccountService = AccountService;\n",{"version":3,"file":"/Users/waynedsouza/Documents/Senju/app-gateway/src/main/webapp/app/core/auth/account.service.ts","sourceRoot":"","sources":["/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/angular-router-loader/src/index.js!/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/tslint-loader/index.js!/Users/waynedsouza/Documents/Senju/app-gateway/src/main/webapp/app/core/auth/account.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { Account } from 'app/core/user/account.model';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n    private userIdentity: any;\n    private authenticated = false;\n    private authenticationState = new Subject<any>();\n\n    constructor(private http: HttpClient) {}\n\n    fetch(): Observable<HttpResponse<Account>> {\n        return this.http.get<Account>(SERVER_API_URL + 'api/account', { observe: 'response' });\n    }\n\n    save(account: any): Observable<HttpResponse<any>> {\n        return this.http.post(SERVER_API_URL + 'api/account', account, { observe: 'response' });\n    }\n\n    authenticate(identity) {\n        this.userIdentity = identity;\n        this.authenticated = identity !== null;\n        this.authenticationState.next(this.userIdentity);\n    }\n\n    hasAnyAuthority(authorities: string[]): boolean {\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\n            return false;\n        }\n\n        for (let i = 0; i < authorities.length; i++) {\n            if (this.userIdentity.authorities.includes(authorities[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    hasAuthority(authority: string): Promise<boolean> {\n        if (!this.authenticated) {\n            return Promise.resolve(false);\n        }\n\n        return this.identity().then(\n            id => {\n                return Promise.resolve(id.authorities && id.authorities.includes(authority));\n            },\n            () => {\n                return Promise.resolve(false);\n            }\n        );\n    }\n\n    identity(force?: boolean): Promise<any> {\n        if (force) {\n            this.userIdentity = undefined;\n        }\n\n        // check and see if we have retrieved the userIdentity data from the server.\n        // if we have, reuse it by immediately resolving\n        if (this.userIdentity) {\n            return Promise.resolve(this.userIdentity);\n        }\n\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\n        return this.fetch()\n            .toPromise()\n            .then(response => {\n                const account = response.body;\n                if (account) {\n                    this.userIdentity = account;\n                    this.authenticated = true;\n                } else {\n                    this.userIdentity = null;\n                    this.authenticated = false;\n                }\n                this.authenticationState.next(this.userIdentity);\n                return this.userIdentity;\n            })\n            .catch(err => {\n                this.userIdentity = null;\n                this.authenticated = false;\n                this.authenticationState.next(this.userIdentity);\n                return null;\n            });\n    }\n\n    isAuthenticated(): boolean {\n        return this.authenticated;\n    }\n\n    isIdentityResolved(): boolean {\n        return this.userIdentity !== undefined;\n    }\n\n    getAuthenticationState(): Observable<any> {\n        return this.authenticationState.asObservable();\n    }\n\n    getImageUrl(): string {\n        return this.isIdentityResolved() ? this.userIdentity.imageUrl : null;\n    }\n}\n"]}]}