{"remainingRequest":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/ts-loader/index.js??ref--9-3!/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/angular-router-loader/src/index.js!/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/tslint-loader/index.js!/Users/waynedsouza/Documents/Senju/app-gateway/src/main/webapp/app/core/auth/user-route-access-service.ts","dependencies":[{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/src/main/webapp/app/core/auth/user-route-access-service.ts","mtime":1549704083535},{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar router_1 = require(\"@angular/router\");\nvar __1 = require(\"../\");\nvar login_modal_service_1 = require(\"../login/login-modal.service\");\nvar state_storage_service_1 = require(\"./state-storage.service\");\nvar UserRouteAccessService = /** @class */ (function () {\n    function UserRouteAccessService(router, loginModalService, accountService, stateStorageService) {\n        this.router = router;\n        this.loginModalService = loginModalService;\n        this.accountService = accountService;\n        this.stateStorageService = stateStorageService;\n    }\n    UserRouteAccessService.prototype.canActivate = function (route, state) {\n        var authorities = route.data['authorities'];\n        // We need to call the checkLogin / and so the accountService.identity() function, to ensure,\n        // that the client has a principal too, if they already logged in by the server.\n        // This could happen on a page refresh.\n        return this.checkLogin(authorities, state.url);\n    };\n    UserRouteAccessService.prototype.checkLogin = function (authorities, url) {\n        var _this = this;\n        return this.accountService.identity().then(function (account) {\n            if (!authorities || authorities.length === 0) {\n                return true;\n            }\n            if (account) {\n                var hasAnyAuthority = _this.accountService.hasAnyAuthority(authorities);\n                if (hasAnyAuthority) {\n                    return true;\n                }\n                if (core_1.isDevMode()) {\n                    console.error('User has not any of required authorities: ', authorities);\n                }\n                return false;\n            }\n            _this.stateStorageService.storeUrl(url);\n            _this.router.navigate(['accessdenied']).then(function () {\n                // only show the login dialog, if the user hasn't logged in yet\n                if (!account) {\n                    _this.loginModalService.open();\n                }\n            });\n            return false;\n        });\n    };\n    var _a, _b, _c, _d;\n    UserRouteAccessService = tslib_1.__decorate([\n        core_1.Injectable({ providedIn: 'root' }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" ? _a : Object, typeof (_b = typeof login_modal_service_1.LoginModalService !== \"undefined\" && login_modal_service_1.LoginModalService) === \"function\" ? _b : Object, typeof (_c = typeof __1.AccountService !== \"undefined\" && __1.AccountService) === \"function\" ? _c : Object, typeof (_d = typeof state_storage_service_1.StateStorageService !== \"undefined\" && state_storage_service_1.StateStorageService) === \"function\" ? _d : Object])\n    ], UserRouteAccessService);\n    return UserRouteAccessService;\n}());\nexports.UserRouteAccessService = UserRouteAccessService;\n",{"version":3,"file":"/Users/waynedsouza/Documents/Senju/app-gateway/src/main/webapp/app/core/auth/user-route-access-service.ts","sourceRoot":"","sources":["/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/angular-router-loader/src/index.js!/Users/waynedsouza/Documents/Senju/app-gateway/node_modules/tslint-loader/index.js!/Users/waynedsouza/Documents/Senju/app-gateway/src/main/webapp/app/core/auth/user-route-access-service.ts"],"names":[],"mappings":";;;AAAA,sCAAsD;AACtD,0CAAmG;AAEnG,yBAAqC;AACrC,oEAAiE;AACjE,iEAA8D;AAG9D;IACI,gCACY,MAAc,EACd,iBAAoC,EACpC,cAA8B,EAC9B,mBAAwC;QAHxC,WAAM,GAAN,MAAM,CAAQ;QACd,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,wBAAmB,GAAnB,mBAAmB,CAAqB;IACjD,CAAC;IAEJ,4CAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QACjE,IAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9C,6FAA6F;QAC7F,gFAAgF;QAChF,uCAAuC;QACvC,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;IACnD,CAAC;IAED,2CAAU,GAAV,UAAW,WAAqB,EAAE,GAAW;QAA7C,iBA0BC;QAzBG,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAA,OAAO;YAC9C,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC1C,OAAO,IAAI,CAAC;aACf;YAED,IAAI,OAAO,EAAE;gBACT,IAAM,eAAe,GAAG,KAAI,CAAC,cAAc,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;gBACzE,IAAI,eAAe,EAAE;oBACjB,OAAO,IAAI,CAAC;iBACf;gBACD,IAAI,gBAAS,EAAE,EAAE;oBACb,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,WAAW,CAAC,CAAC;iBAC5E;gBACD,OAAO,KAAK,CAAC;aAChB;YAED,KAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACvC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC;gBACxC,+DAA+D;gBAC/D,IAAI,CAAC,OAAO,EAAE;oBACV,KAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;iBACjC;YACL,CAAC,CAAC,CAAC;YACH,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;IACP,CAAC;;IA1CQ,sBAAsB;QADlC,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;qEAGX,eAAM,oBAAN,eAAM,oDACK,uCAAiB,oBAAjB,uCAAiB,oDACpB,kBAAc,oBAAd,kBAAc,oDACT,2CAAmB,oBAAnB,2CAAmB;OAL3C,sBAAsB,CA2ClC;IAAD,6BAAC;CAAA,AA3CD,IA2CC;AA3CY,wDAAsB","sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { AccountService } from '../';\nimport { LoginModalService } from '../login/login-modal.service';\nimport { StateStorageService } from './state-storage.service';\n\n@Injectable({ providedIn: 'root' })\nexport class UserRouteAccessService implements CanActivate {\n    constructor(\n        private router: Router,\n        private loginModalService: LoginModalService,\n        private accountService: AccountService,\n        private stateStorageService: StateStorageService\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Promise<boolean> {\n        const authorities = route.data['authorities'];\n        // We need to call the checkLogin / and so the accountService.identity() function, to ensure,\n        // that the client has a principal too, if they already logged in by the server.\n        // This could happen on a page refresh.\n        return this.checkLogin(authorities, state.url);\n    }\n\n    checkLogin(authorities: string[], url: string): Promise<boolean> {\n        return this.accountService.identity().then(account => {\n            if (!authorities || authorities.length === 0) {\n                return true;\n            }\n\n            if (account) {\n                const hasAnyAuthority = this.accountService.hasAnyAuthority(authorities);\n                if (hasAnyAuthority) {\n                    return true;\n                }\n                if (isDevMode()) {\n                    console.error('User has not any of required authorities: ', authorities);\n                }\n                return false;\n            }\n\n            this.stateStorageService.storeUrl(url);\n            this.router.navigate(['accessdenied']).then(() => {\n                // only show the login dialog, if the user hasn't logged in yet\n                if (!account) {\n                    this.loginModalService.open();\n                }\n            });\n            return false;\n        });\n    }\n}\n"]}]}