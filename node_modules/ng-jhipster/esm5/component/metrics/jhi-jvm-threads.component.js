/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import { Component, Input } from '@angular/core';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { JhiThreadModalComponent } from './jhi-metrics-modal-threads.component';
var JhiJvmThreadsComponent = /** @class */ (function () {
    function JhiJvmThreadsComponent(modalService) {
        this.modalService = modalService;
    }
    /**
     * @return {?}
     */
    JhiJvmThreadsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.threadStats = {
            threadDumpRunnable: 0,
            threadDumpWaiting: 0,
            threadDumpTimedWaiting: 0,
            threadDumpBlocked: 0,
            threadDumpAll: 0
        };
        this.threadData.forEach(function (value) {
            if (value.threadState === 'RUNNABLE') {
                _this.threadStats.threadDumpRunnable += 1;
            }
            else if (value.threadState === 'WAITING') {
                _this.threadStats.threadDumpWaiting += 1;
            }
            else if (value.threadState === 'TIMED_WAITING') {
                _this.threadStats.threadDumpTimedWaiting += 1;
            }
            else if (value.threadState === 'BLOCKED') {
                _this.threadStats.threadDumpBlocked += 1;
            }
        });
        this.threadStats.threadDumpAll =
            this.threadStats.threadDumpRunnable +
                this.threadStats.threadDumpWaiting +
                this.threadStats.threadDumpTimedWaiting +
                this.threadStats.threadDumpBlocked;
    };
    /**
     * @return {?}
     */
    JhiJvmThreadsComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var modalRef = this.modalService.open(JhiThreadModalComponent);
        modalRef.componentInstance.threadDump = this.threadData;
    };
    JhiJvmThreadsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jhi-jvm-threads',
                    template: "<h4 jhiTranslate=\"metrics.jvm.threads.title\">Threads </h4>\n    <span><span jhiTranslate=\"metrics.jvm.threads.runnable\">Runnable</span> {{threadStats.threadDumpRunnable}}</span>\n    <ngb-progressbar [value]=\"threadStats.threadDumpRunnable\" [max]=\"threadStats.threadDumpAll\" [striped]=\"true\"\n                     [animated]=\"false\" type=\"success\">\n        <span>{{threadStats.threadDumpRunnable * 100 / threadStats.threadDumpAll | number:'1.0-0'}}%</span>\n    </ngb-progressbar>\n    <span><span jhiTranslate=\"metrics.jvm.threads.timedwaiting\">Timed Waiting</span> ({{threadStats.threadDumpTimedWaiting}})</span>\n    <ngb-progressbar [value]=\"threadStats.threadDumpTimedWaiting\" [max]=\"threadStats.threadDumpAll\" [striped]=\"true\"\n                     [animated]=\"false\" type=\"warning\">\n        <span>{{threadStats.threadDumpTimedWaiting * 100 / threadStats.threadDumpAll | number:'1.0-0'}}%</span>\n    </ngb-progressbar>\n    <span><span jhiTranslate=\"metrics.jvm.threads.waiting\">Waiting</span> ({{threadStats.threadDumpWaiting}})</span>\n    <ngb-progressbar [value]=\"threadStats.threadDumpWaiting\" [max]=\"threadStats.threadDumpAll\" [striped]=\"true\"\n                     [animated]=\"false\" type=\"warning\">\n        <span>{{threadStats.threadDumpWaiting * 100 / threadStats.threadDumpAll | number:'1.0-0'}}%</span>\n    </ngb-progressbar>\n    <span><span jhiTranslate=\"metrics.jvm.threads.blocked\">Blocked</span> ({{threadStats.threadDumpBlocked}})</span>\n    <ngb-progressbar [value]=\"threadStats.threadDumpBlocked\" [max]=\"threadStats.threadDumpAll\" [striped]=\"true\"\n                     [animated]=\"false\" type=\"success\">\n        <span>{{threadStats.threadDumpBlocked * 100 / threadStats.threadDumpAll | number:'1.0-0'}}%</span>\n    </ngb-progressbar>\n    <div>Total: {{threadStats.threadDumpAll}}</div>\n    <button class=\"hand btn btn-primary btn-sm\" (click)=\"open()\" data-toggle=\"modal\" data-target=\"#threadDump\">\n        <span>Expand</span>\n    </button>"
                }] }
    ];
    /** @nocollapse */
    JhiJvmThreadsComponent.ctorParameters = function () { return [
        { type: NgbModal }
    ]; };
    JhiJvmThreadsComponent.propDecorators = {
        threadData: [{ type: Input }]
    };
    return JhiJvmThreadsComponent;
}());
export { JhiJvmThreadsComponent };
if (false) {
    /** @type {?} */
    JhiJvmThreadsComponent.prototype.threadStats;
    /**
     * object containing thread related metrics
     * @type {?}
     */
    JhiJvmThreadsComponent.prototype.threadData;
    /**
     * @type {?}
     * @private
     */
    JhiJvmThreadsComponent.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,