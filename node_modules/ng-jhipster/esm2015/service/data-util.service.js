/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * An utility service for data.
 */
export class JhiDataUtils {
    constructor() {
    }
    /**
     * Method to abbreviate the text given
     * @param {?} text
     * @param {?=} append
     * @return {?}
     */
    abbreviate(text, append = '...') {
        if (text.length < 30) {
            return text;
        }
        return text ? (text.substring(0, 15) + append + text.slice(-10)) : '';
    }
    /**
     * Method to find the byte size of the string provides
     * @param {?} base64String
     * @return {?}
     */
    byteSize(base64String) {
        return this.formatAsBytes(this.size(base64String));
    }
    /**
     * Method to open file
     * @param {?} contentType
     * @param {?} data
     * @return {?}
     */
    openFile(contentType, data) {
        if (window.navigator && window.navigator.msSaveOrOpenBlob) {
            // To support IE and Edge
            /** @type {?} */
            const byteCharacters = atob(data);
            /** @type {?} */
            const byteNumbers = new Array(byteCharacters.length);
            for (let i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            /** @type {?} */
            const byteArray = new Uint8Array(byteNumbers);
            /** @type {?} */
            const blob = new Blob([byteArray], {
                type: contentType
            });
            window.navigator.msSaveOrOpenBlob(blob);
        }
        else {
            // Other browsers
            /** @type {?} */
            const fileURL = `data:${contentType};base64,${data}`;
            /** @type {?} */
            const win = window.open();
            win.document.write('<iframe src="' + fileURL + '" frameborder="0" style="border:0; top:0; left:0; bottom:0; right:0; width:100%; height:100%;" allowfullscreen></iframe>');
        }
    }
    /**
     * Method to convert the file to base64
     * @param {?} file
     * @param {?} cb
     * @return {?}
     */
    toBase64(file, cb) {
        /** @type {?} */
        const fileReader = new FileReader();
        fileReader.onload = function (e) {
            /** @type {?} */
            const base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);
            cb(base64Data);
        };
        fileReader.readAsDataURL(file);
    }
    /**
     * Method to clear the input
     * @param {?} entity
     * @param {?} elementRef
     * @param {?} field
     * @param {?} fieldContentType
     * @param {?} idInput
     * @return {?}
     */
    clearInputImage(entity, elementRef, field, fieldContentType, idInput) {
        if (entity && field && fieldContentType) {
            if (entity.hasOwnProperty(field)) {
                entity[field] = null;
            }
            if (entity.hasOwnProperty(fieldContentType)) {
                entity[fieldContentType] = null;
            }
            if (elementRef && idInput && elementRef.nativeElement.querySelector('#' + idInput)) {
                elementRef.nativeElement.querySelector('#' + idInput).value = null;
            }
        }
    }
    /**
     * @private
     * @param {?} suffix
     * @param {?} str
     * @return {?}
     */
    endsWith(suffix, str) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    paddingSize(value) {
        if (this.endsWith('==', value)) {
            return 2;
        }
        if (this.endsWith('=', value)) {
            return 1;
        }
        return 0;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    size(value) {
        return value.length / 4 * 3 - this.paddingSize(value);
    }
    /**
     * @private
     * @param {?} size
     * @return {?}
     */
    formatAsBytes(size) {
        return size.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ') + ' bytes';
    }
    /**
     * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object
     * and returns a promise.
     *
     * @param {?} event the object containing the file (at event.target.files[0])
     * @param {?} entity the object to set the file's 'base 64 data' and 'file type' on
     * @param {?} field the field name to set the file's 'base 64 data' on
     * @param {?} isImage boolean representing if the file represented by the event is an image
     * @return {?} a promise that resolves to the modified entity if operation is successful, otherwise rejects with an error message
     */
    setFileData(event, entity, field, isImage) {
        return new Promise((resolve, reject) => {
            if (event && event.target && event.target.files && event.target.files[0]) {
                /** @type {?} */
                const file = event.target.files[0];
                if (isImage && !/^image\//.test(file.type)) {
                    reject(`File was expected to be an image but was found to be ${file.type}`);
                }
                else {
                    this.toBase64(file, (base64Data) => {
                        entity[field] = base64Data;
                        entity[`${field}ContentType`] = file.type;
                        resolve(entity);
                    });
                }
            }
            else {
                reject(`Base64 data was not set as file could not be extracted from passed parameter: ${event}`);
            }
        });
    }
    /**
     * Method to download file
     * @param {?} contentType
     * @param {?} data
     * @param {?} fileName
     * @return {?}
     */
    downloadFile(contentType, data, fileName) {
        /** @type {?} */
        const byteCharacters = atob(data);
        /** @type {?} */
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        /** @type {?} */
        const byteArray = new Uint8Array(byteNumbers);
        /** @type {?} */
        const blob = new Blob([byteArray], {
            type: contentType
        });
        /** @type {?} */
        const tempLink = document.createElement('a');
        tempLink.href = window.URL.createObjectURL(blob);
        tempLink.download = fileName;
        tempLink.target = '_blank';
        tempLink.click();
    }
}
JhiDataUtils.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
JhiDataUtils.ctorParameters = () => [];
/** @nocollapse */ JhiDataUtils.ngInjectableDef = i0.defineInjectable({ factory: function JhiDataUtils_Factory() { return new JhiDataUtils(); }, token: JhiDataUtils, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,